package test;

import java.io.*;
import javax.sound.sampled.*;
/**
 * Use SourceDataLine to read line-by-line from the external sound file.
 * For computer game, use Clip to pre-load short-duration sound files.
 */
public class SoundLineTest {
   public static void main(String[] args) {
      SourceDataLine soundLine = null;
      SourceDataLine soundLine2 = null;
      //this is the size of the grains!!!
      int BUFFER_SIZE = 300;
   
      // Set up an audio input stream piped from the sound file.
      try {
         File soundFile = new File("C:\\Users\\HCI Lab\\Desktop\\Leo Laniece summer 2018\\sound recordings\\metalOnWoodSlow.WAV");
         File soundFile2 = new File("C:\\Users\\HCI Lab\\Desktop\\Leo Laniece summer 2018\\sound recordings\\1234.WAV");
         AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(soundFile);
         AudioInputStream audioInputStream2 = AudioSystem.getAudioInputStream(soundFile2);
         //read audio data from whatever source (file/classloader/etc.)
        // InputStream audioSrc = new InputStream(soundFile);
         //add buffer for mark/reset support
         InputStream bufferedIn = new BufferedInputStream(audioInputStream);
         AudioInputStream audioStream = AudioSystem.getAudioInputStream(bufferedIn);
         


         AudioFormat audioFormat = audioInputStream.getFormat();
         AudioFormat audioFormat2 = audioInputStream2.getFormat();         
         DataLine.Info info = new DataLine.Info(SourceDataLine.class, audioFormat);
         DataLine.Info info2 = new DataLine.Info(SourceDataLine.class, audioFormat2);
         soundLine = (SourceDataLine) AudioSystem.getLine(info);
         soundLine2 = (SourceDataLine) AudioSystem.getLine(info2);
         soundLine.open(audioFormat);
         soundLine2.open(audioFormat2);
         soundLine.start();
         soundLine2.start();
         
         int nBytesRead = 0;
         byte[] sampledData = new byte[BUFFER_SIZE];
         //Handles section by section of an audio file
         
         int gate = 0;
         //fill up 1/3 of the sampleData with audioStream and the other 2/3rds with audioStream2
         while (nBytesRead >-1) {
        	 //This works to evenly interweave two sound sample grains.
        	 //but, the shortest sample determines the length of the total sound produced
        	 //also, the grains are provided from beggining to end of the sound sample
        	 //want to create a loop to continuously generate the sound
        	 // i need to build the loop.
        	 //loop needs to reset the audio file when the audio file reaches its end.
        	 // how do i reset a sound file using audioInputStream  
        	 //https://stackoverflow.com/questions/38358118/resetting-java-audioinputstream-loaded-from-file
        	 //should have the answer?
        	 System.out.println(audioStream.markSupported());
        	 audioStream.mark(Integer.MAX_VALUE);
        	 
        	 
        	 if (gate == 0) {
        	nBytesRead = audioInputStream.read(sampledData, 0, sampledData.length);            
            System.out.println(nBytesRead);
        	 }
        	 else {
        		 nBytesRead = audioInputStream2.read(sampledData, 0, sampledData.length);         		 
        	 }
            //this just seems to be adding length to the sound file(sampledData.length/2) -1
            //nBytesRead =           
            
            if (nBytesRead >= 0) {
               // Writes audio data to the mixer via this source data line.
            	
            	//if i can stagger the offset value, i could potentially thread in 2 different audio sample bytes?
            	
            	//change 
               soundLine.write(sampledData, 0, nBytesRead);
               
               //soundLine2.write(sampledData, 0, nBytesRead);
               if (gate ==0) {
            	   gate = 1;
               }else {
            	   gate = 0;
               }
               
            }
         }
      } catch (UnsupportedAudioFileException ex) {
         ex.printStackTrace();
      } catch (IOException ex) {
         ex.printStackTrace();
      } catch (LineUnavailableException ex) {
         ex.printStackTrace();
      } finally {
         soundLine.drain();
         soundLine.close();
      }
   }
}
